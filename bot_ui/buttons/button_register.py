import re
from bot_start import bot
import mysql_handler
from bot_ui.email_server_handler import email_server, sender
from bot_ui.markups.markup_for_registrants import markup_for_registrants
from bot_ui.markups.markup_register import markup_register
from bot_ui.markups.markup_send_email import markup_send_email
from bot_ui.markups.markup_set_avatar import markup_set_avatar
from check_is_back import check_is_back
import random
import smtplib
from email.mime.text import MIMEText


def init_register():
    @bot.message_handler(func=lambda message: message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ü§ù")
    def try_register(message):
        if check_is_back(message):
            return
        cur = mysql_handler.connection.cursor()
        cur.execute('SELECT * FROM sellers WHERE user_id = %s', message.from_user.id)
        myresult = cur.fetchone()
        if myresult is None:
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Å–µ–π—á–∞—Å –í–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º! –í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫–Ω–µ–π–º.',
                             reply_markup=markup_register)
            bot.register_next_step_handler(message, user_nick_name)
            return
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.')

    def user_nick_name(message):
        if check_is_back(message):
            return
        if message.text is None or not re.search('^[a-zA-Z]+$', message.text):
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–∏–∫–Ω–µ–π–º –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, user_nick_name)
            return
        nickname = message.text.strip()
        bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞? –ü–æ–∑–∂–µ —ç—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç '
                                          '—Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å".', reply_markup=markup_set_avatar)
        bot.register_next_step_handler(message, user_ask_number, nickname)

    def user_ask_number(message, nickname):
        if check_is_back(message):
            return
        if message.text == '–î–∞':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
            bot.register_next_step_handler(message, user_number, nickname)
            return
        if message.text == '–ù–µ—Ç':
            bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä? –ü–æ–∑–∂–µ —ç—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ '
                                              '–∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å".', reply_markup=markup_set_avatar)
            bot.register_next_step_handler(message, user_ask_avatar, nickname, None)
            return
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.')
        bot.register_next_step_handler(message, user_ask_number, nickname)

    def user_number(message, nickname):
        if check_is_back(message):
            return
        if message.text is None or not re.search('^((8|\+7)[\- ]?)?(\(?\d{3}\)?[\- ]?)?[\d\- ]{7,10}$',
                                                 message.text):
            bot.send_message(message.chat_id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, user_number, nickname)
            return
        number = message.text.strip()
        bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä? –ü–æ–∑–∂–µ —ç—Ç–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ '
                                          '–∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å".', reply_markup=markup_set_avatar)
        bot.register_next_step_handler(message, user_ask_avatar, nickname, number)

    def user_ask_avatar(message, nickname, number):
        if check_is_back(message):
            return
        if message.text == '–î–∞':
            bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –í–∞—à –∞–≤–∞—Ç–∞—Ä.', reply_markup=markup_register)
            bot.register_next_step_handler(message, user_avatar, nickname, number)
            return
        if message.text == '–ù–µ—Ç':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É.', reply_markup=markup_register)
            bot.register_next_step_handler(message, user_email, nickname, number, None)
            return
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.')
        bot.register_next_step_handler(message, user_ask_avatar, nickname, number)

    def user_avatar(message, nickname, number):
        if check_is_back(message):
            return
        if message.json.get('photo') is None:
            bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –í–∞—à –∞–≤–∞—Ç–∞—Ä –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, user_avatar, nickname, number)
            return
        avatar = message.json['photo'][len(message.json['photo']) - 1]['file_id']
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É.')
        bot.register_next_step_handler(message, user_email, nickname, number, avatar)

    def user_email(message, nickname, number, avatar):
        if check_is_back(message):
            return
        if message.text is None or not re.search('[^@]+@[^@]+\.[^@]+', message.text):
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(message, user_email, nickname, number, avatar)
            return
        email = message.text.strip()
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–∞—Ä–æ–ª—å.')
        bot.register_next_step_handler(message, user_pass, nickname, number, avatar, email)

    def user_pass(message, nickname, number, avatar, email):
        if check_is_back(message):
            return
        if message.text is None or not re.search('^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{8,}$', message.text):
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â—ë —Ä–∞–∑. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è - 8 —Å–∏–º–≤–æ–ª–æ–≤.'
                                              ' –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–∞, –∞ —Ç–∞–∫–∂–µ –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –∏ '
                                              '–ø—Ä–æ–ø–∏—Å–Ω—É—é –±—É–∫–≤—É. –ü–∞—Ä–æ–ª—å –ù–ï –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã(@,$,!,%,*,#,'
                                              '?,&)')
            bot.register_next_step_handler(message, user_pass, nickname, number, avatar, email)
            return
        user_password = message.text.strip()
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –í–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É "–°–ø–∞–º".')
        recipient = email
        confirmation_code = random.randint(100000, 999999)

        try:
            msg = MIMEText(str(confirmation_code))
            msg["From"] = sender
            msg["To"] = email
            msg["Subject"] = "–ö–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            email_server.sendmail(sender, recipient, msg.as_string())
        finally:
            bot.register_next_step_handler(message, end_of_registration, nickname, number, avatar, email, user_password,
                                           confirmation_code)

    def end_of_registration(message, nickname, number, avatar, email, user_password, confirmation_code):
        if check_is_back(message):
            return
        if str(confirmation_code) != message.text:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–¥.')
            bot.register_next_step_handler(message, end_of_registration, nickname, number, avatar, email, user_password,
                                           confirmation_code)
            return

        cur = mysql_handler.connection.cursor()
        cur.execute("INSERT INTO telebot.sellers (nickname, number, email, pass, user_id) VALUES "
                    "(%s, %s, %s, %s, %s)",(nickname, None, email, user_password, message.from_user.id))

        sql_id = cur.execute("SELECT id FROM sellers WHERE user_id = %s", message.from_user.id)

        if avatar is not None:
            file = bot.get_file(avatar)
            downloaded_file = bot.download_file(file.file_path)
            with open('user_data/avatars/{}.jpg'.format(sql_id), 'wb') as new_file:
                new_file.write(downloaded_file)

        if number is not None:
            cur = mysql_handler.connection.cursor()
            cur.execute('UPDATE sellers SET number = %s WHERE user_id = %s', (number, message.from_user.id))

        bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=markup_for_registrants)

        mysql_handler.connection.commit()
